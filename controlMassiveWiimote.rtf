{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs26 \cf2 (\
\cf3 var\cf2  ringbuf = \cf3 Array\cf2 .newClear(2); \cf4 // array for the ringbuf smoothing arrays\cf2 \
\cf3 var\cf2  infreq = \cf3 Array\cf2 .newClear(2); \cf4 // holds the input note value\cf2 \
\cf3 var\cf2  suppressContinuousPitch = \cf3 Array\cf2 .newClear(2); \cf4 // indicates if a decorator is being performed\cf2 \
\cf3 var\cf2  currentNoteIndex = \cf3 Array\cf2 .newClear(2);\
\cf3 var\cf2  unitPitchShift = \cf3 Array\cf2 .newClear(2);\
\cf3 var\cf2  noteSpecRange = \cf3 Array\cf2 .newClear(2);\
\cf3 var\cf2  mOut, myVeloc=100, chan=\cf3 Array\cf2 .newClear(2);\
\cf3 var\cf2  atqsWii = \cf3 LeaWii\cf2 .new(2);\
\cf3 var\cf2  bigNoteList;\
\cf3 var\cf2   aNote = \cf3 Array\cf2 .newClear(2);\
\cf4 // midi stuff\cf2 \
\pard\pardeftab560\ql\qnatural
\cf3 MIDIClient\cf2 .init;\
mOut = \cf3 MIDIOut\cf2 (0, \cf3 MIDIClient\cf2 .destinations.at(0).uid);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \
\cf4 // *****************************************\cf2 \
\cf4 // initialising values for pitch controllers\cf2 \
\
ringbuf[0] = [1,2,3,4,5,6,7,8,9,10];\
ringbuf[1] = [1,2,3,4,5,6,7,8,9,10];\
suppressContinuousPitch[0] = \cf3 false\cf2 ;\
suppressContinuousPitch[1] = \cf3 false\cf2 ;\
currentNoteIndex[0]=6;\
currentNoteIndex[1]=12;\
unitPitchShift[0] = 4;\
unitPitchShift[1] = 4;\
noteSpecRange[0] = 10;\
noteSpecRange[1] = 10;\
chan[0] = 0;\
chan[1]=1;\
\cf4 // generate the big note list\cf2 \
\cf4 // this is simply a shortcut to generate the full list of notes.\cf2 \
bigNoteList=\cf3 List\cf2 .new();	\
5.do(\{\cf3 |i|\cf2 	\
		[33,35,36,38,40,43].do(\{\cf3 |jitem, j|\cf2 \
		bigNoteList.add;\
		bigNoteList[j+(i*6)] = (jitem + (12*i));\
	\});\
\});\
\
\
\
\cf4 // *******************************************************************************\cf2 \
\cf4 //          ------------------- PITCH SYNTHESIZER 1 ------------------------\cf2 \
\cf4 // *******************************************************************************\cf2 \
\
\cf4 // \cf2 \
\cf4 // **************************************\cf2 \
\cf4 // now tie wiimote pitch to musical pitch\cf2 \
atqsWii.add(\cf5 "p"\cf2 , \{\cf3 |time, resp, msg|\cf2 \
\cf4 // so, in comes a note\cf2 \
if (~clutches[1].at(\cf5 "b"\cf2 ) == 1,\
	\{\
		if (suppressContinuousPitch[0] == \cf3 false\cf2 , \{\
			\cf4 // if we are not trilling \cf2 \
			\cf4 // ***********************************\cf2 \
			\cf4 // pass the new value to the ringbuf array\cf2 \
			ringbuf[0] = ringbuf[0][1..] ++ msg[1];\
			\cf4 // the infreq is median value of the ringbuf array mapped to the current note range\cf2 \
			infreq[0] = \cf3 ControlSpec\cf2 (0, noteSpecRange[0], \cf6 \\lin\cf2 , 1).map(ringbuf[0].median);\
			\cf4 // if the note has chan[0]ged\cf2 \
			if (aNote[0] != bigNoteList[infreq[0] + currentNoteIndex[0]],\
				\{\
\pard\pardeftab560\ql\qnatural
\cf2 					if (aNote[0].notNil, \{mOut.noteOff(chan[0], aNote[0],0);\});\
					\cf4 // then store the new note\cf2 \
					aNote[0] = bigNoteList[infreq[0] + currentNoteIndex[0]];\
					\cf4 // then put the new note out\cf2 \
					aNote[0].postln;\
					mOut.noteOn(chan[0],aNote[0], myVeloc);\
				\});\
		\}); \cf4 // end if trill \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \}); \cf4 // end if b pressed\cf2 \
\}, \cf4 // end of function\cf2 \
2); \cf4 // wiimote 2\cf2 \
\
\
\cf4 // ****************************************\cf2 \
\cf4 // set "a" to trigger a "decoration" rutine\cf2 \
atqsWii.add(\cf5 "a"\cf2 , \{\cf3 |t,r,msg|\cf2 \
	if (msg[1] == 1, \{\
		\cf4 // var initVal = ~atqs[smallest];\cf2 \
		\cf3 var\cf2  a, b;\
		\cf3 var\cf2  odd = \cf3 true\cf2 ;\
		suppressContinuousPitch[0]=\cf3 true\cf2 ;\
		a = \cf3 Pgeom\cf2 .new(0.05,1.1,24);\
		b = a.asStream;\
		\cf3 AppClock\cf2 .sched(0.0,\{ \
			if (odd==\cf3 true\cf2 , \
				\cf4 // do a note \cf2 \
				\{\
					\cf4 // first turn current note off\cf2 \
					mOut.noteOff(chan[0], aNote[0],0);\
					\cf4 // then store the new note\cf2 \
\pard\pardeftab560\ql\qnatural
\cf2 					aNote[0] = bigNoteList[infreq[0] + currentNoteIndex[0]];\
					\cf4 // then put the new note out\cf2 \
					\cf4 //aNote[0].postln;\cf2 \
					mOut.noteOn(chan[0],aNote[0], myVeloc);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 					odd = \cf3 false\cf2 \},\
				\cf4 // else do a trill note\cf2 \
				\{\
					\cf4 // first turn current note off\cf2 \
					mOut.noteOff(chan[0], aNote[0],0);\
					\cf4 // then store the new note\cf2 \
\pard\pardeftab560\ql\qnatural
\cf2 					aNote[0] = bigNoteList[infreq[0] + currentNoteIndex[0] + 1];\
					\cf4 // then put the new note out\cf2 \
					\cf4 // aNote[0].postln;\cf2 \
					mOut.noteOn(chan[0],aNote[0], myVeloc);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 					odd = \cf3 true\cf2 \}\
			); \cf4 // end if	\cf2 \
			b.next; \
		\}); \cf4 // end app clock				\cf2 \
	\}, \cf4 // end if msg[1] = 1\cf2 \
	\{		suppressContinuousPitch[0]=\cf3 false\cf2 ;\
	\}\
); \cf4 // end if\cf2 \
\}, 2); \cf4 // end leawii\cf2 \
\
\
\
\
\cf4 // **************************\cf2 \
\cf4 // roll now sets filter value\cf2 \
\cf4 /*atqsWii.add("r", \{|t,r,msg|\
	\{\
		mySynth[0].set(\\cutoff, ControlSpec.new(500,2000,\\lin,1,200).map(msg[1]))\}.defer;\
\}, 2); // end leaWii*/\cf2 \
\
\cf4 // ******************************\cf2 \
\cf4 // "up" raises current note range\cf2 \
atqsWii.add(\cf5 "u"\cf2 , \{\cf3 |t,r,msg|\cf2 \
	currentNoteIndex[0]= currentNoteIndex[0] + unitPitchShift[0];\
	if (currentNoteIndex[0] > (bigNoteList.size-noteSpecRange[0]), \{\
			currentNoteIndex[0] = bigNoteList.size-noteSpecRange[0];\
	\});\
\}, 2);\
\
\cf4 // ********************************\cf2 \
\cf4 // "down" lowers current note range\cf2 \
atqsWii.add(\cf5 "d"\cf2 , \{\cf3 |t,r,msg|\cf2 \
	currentNoteIndex[0]= currentNoteIndex[0]-unitPitchShift[0];\
	if (currentNoteIndex[0] < 0 , \{\
			currentNoteIndex[0] = 0;\
	\});\
\}, 2);\
\cf4 // turn off a note if required\cf2 \
atqsWii.add(\cf5 "1"\cf2 , \{\cf3 |t,r,msg|\cf2 \
	if (msg[1] == 1, \{mOut.noteOff(chan[0], aNote[0],0);\});\
\},2);\
\cf4 // *******************************************************************************\cf2 \
\cf4 //          ------------------- NEW PITCH SYNTHESIZER 2 ------------------------\cf2 \
\cf4 // *******************************************************************************\cf2 \
\
\cf4 // \cf2 \
\cf4 // **************************************\cf2 \
\cf4 // now tie wiimote pitch to musical pitch\cf2 \
atqsWii.add(\cf5 "np"\cf2 , \{\cf3 |time, resp, msg|\cf2 \
\cf4 // so, in comes a note\cf2 \
if (~clutches[1].at(\cf5 "z"\cf2 ) == 1,\
	\{\
		if (suppressContinuousPitch[1] == \cf3 false\cf2 , \{\
			\cf4 // if we are not trilling \cf2 \
			\cf4 // ***********************************\cf2 \
			\cf4 // pass the new value to the ringbuf array\cf2 \
			ringbuf[1] = ringbuf[1][1..] ++ msg[1];\
			\cf4 // the infreq is median value of the ringbuf array mapped to the current note range\cf2 \
			infreq[1] = \cf3 ControlSpec\cf2 (0, noteSpecRange[1], \cf6 \\lin\cf2 , 1).map(ringbuf[1].median);\
			\cf4 // if the note has chan[1]ged\cf2 \
			if (aNote[1] != bigNoteList[infreq[1] + currentNoteIndex[1]],\
				\{\
\pard\pardeftab560\ql\qnatural
\cf2 					if (aNote[1].notNil, \{mOut.noteOff(chan[1], aNote[1],0);\});\
					\cf4 // then store the new note\cf2 \
					aNote[1] = bigNoteList[infreq[1] + currentNoteIndex[1]];\
					\cf4 // then put the new note out\cf2 \
					aNote[1].postln;\
					mOut.noteOn(chan[1],aNote[1], myVeloc);\
				\});\
		\}); \cf4 // end if trill \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \}); \cf4 // end if b pressed\cf2 \
\}, \cf4 // end of function\cf2 \
2); \cf4 // wiimote 2\cf2 \
\
\cf4 // turn off a note if required\cf2 \
atqsWii.add(\cf5 "2"\cf2 , \{\cf3 |t,r,msg|\cf2 \
	if (msg[1] == 1, \{mOut.noteOff(chan[1], aNote[1],0);\});\
\},2);\
		\
\
\
\cf4 // ****************************************\cf2 \
\cf4 // set "c" to trigger a "decoration" rutine\cf2 \
atqsWii.add(\cf5 "c"\cf2 , \{\cf3 |t,r,msg|\cf2 \
	if (msg[1] == 1, \{\
		\cf4 // var initVal = ~atqs[smallest];\cf2 \
		\cf3 var\cf2  a, b;\
		\cf3 var\cf2  odd = \cf3 true\cf2 ;\
		suppressContinuousPitch[1]=\cf3 true\cf2 ;\
		a = \cf3 Pgeom\cf2 .new(0.05,1.1,24);\
		b = a.asStream;\
		\cf3 AppClock\cf2 .sched(0.0,\{ \
			if (odd==\cf3 true\cf2 , \
				\cf4 // do a note \cf2 \
				\{\
					\cf4 // first turn current note off\cf2 \
					mOut.noteOff(chan[1], aNote[1],0);\
					\cf4 // then store the new note\cf2 \
\pard\pardeftab560\ql\qnatural
\cf2 					aNote[1] = bigNoteList[infreq[1] + currentNoteIndex[1]];\
					\cf4 // then put the new note out\cf2 \
					\cf4 //aNote[1].postln;\cf2 \
					mOut.noteOn(chan[1],aNote[1], myVeloc);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 					odd = \cf3 false\cf2 \},\
				\cf4 // else do a trill note\cf2 \
				\{\
					\cf4 // first turn current note off\cf2 \
					mOut.noteOff(chan[1], aNote[1],0);\
					\cf4 // then store the new note\cf2 \
\pard\pardeftab560\ql\qnatural
\cf2 					aNote[1] = bigNoteList[infreq[1] + currentNoteIndex[1] + 1];\
					\cf4 // then put the new note out\cf2 \
					\cf4 // aNote[1].postln;\cf2 \
					mOut.noteOn(chan[1],aNote[1], myVeloc);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 					odd = \cf3 true\cf2 \}\
			); \cf4 // end if	\cf2 \
			b.next; \
		\}); \cf4 // end app clock				\cf2 \
	\}, \cf4 // end if msg[1] = 1\cf2 \
	\{		suppressContinuousPitch[1]=\cf3 false\cf2 ;\
	\}\
); \cf4 // end if\cf2 \
\}, 2); \cf4 // end leawii\cf2 \
\
\
\
\
\cf4 // **************************\cf2 \
\cf4 // roll now sets filter value\cf2 \
\cf4 /*atqsWii.add("r", \{|t,r,msg|\
	\{\
		mySynth[0].set(\\cutoff, ControlSpec.new(500,2000,\\lin,1,200).map(msg[1]))\}.defer;\
\}, 2); // end leaWii*/\cf2 \
\
\cf4 // ******************************\cf2 \
\cf4 // "up" raises current note range\cf2 \
\cf4 /*\
atqsWii.add("u", \{|t,r,msg|\
	currentNoteIndex[0]= currentNoteIndex[0] + unitPitchShift[0];\
	if (currentNoteIndex[0] > (bigNoteList.size-noteSpecRange[0]), \{\
			currentNoteIndex[0] = bigNoteList.size-noteSpecRange[0];\
	\});\
\}, 2);\
*/\cf2 \
\cf4 // ********************************\cf2 \
\cf4 // "down" lowers current note range\cf2 \
\cf4 /*\
atqsWii.add("d", \{|t,r,msg|\
	currentNoteIndex[0]= currentNoteIndex[0]-unitPitchShift[0];\
	if (currentNoteIndex[0] < 0 , \{\
			currentNoteIndex[0] = 0;\
	\});\
\}, 2);\
\
*/\cf2 \
\
\
\
)\
\
\
\cf4 // &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\cf2 \
\cf4 // &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\cf2 \
\cf4 // &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\cf2 \
\
\cf4 // end of code block for now\cf2 \
\
\
\cf4 // *******************************************************************************\cf2 \
\cf4 //          ------------------- PITCH SYNTHESIZER 2 ------------------------\cf2 \
\cf4 // *******************************************************************************\cf2 \
\
\cf4 // \cf2 \
\cf4 // **************************************\cf2 \
\cf4 // now tie nunchuk pitch to musical pitch\cf2 \
atqsWii.add(\cf5 "np"\cf2 , \{\cf3 |time, resp, msg|\cf2 \
if (suppressContinuousPitch[1] == \cf3 false\cf2 , \{\
	\cf4 // ***********************************\cf2 \
	\cf4 // pass the new value to the ringbuf array\cf2 \
	ringbuf[1] = ringbuf[1][1..] ++ msg[1];\
	infreq[1] = \cf3 ControlSpec\cf2 (0, noteSpecRange[1], \cf6 \\lin\cf2 , 1).map(ringbuf[1].median);\
	mySynth[1].set(\cf6 \\freq\cf2 , bigNoteList[infreq[1] + currentNoteIndex[1]].midicps)\
\}); \cf4 // end if \cf2 \
	\}, \cf4 // end of function, but don't forget to map to wiimote 2!\cf2 \
 2);\
\
\cf4 // *****************************************\cf2 \
\cf4 // "z" must be held down for a note to sound\cf2 \
atqsWii.add(\cf5 "z"\cf2 , \{\cf3 |t,r,msg|\cf2 \
		mySynth[1].set(\cf6 \\gate\cf2 , msg[1]);\
\}, 2); \cf4 // end leawii\cf2 \
\
\cf4 // ****************************************\cf2 \
\cf4 // set "c" to trigger a "decoration" rutine\cf2 \
atqsWii.add(\cf5 "c"\cf2 , \{\cf3 |t,r,msg|\cf2 \
	if (msg[1] == 1, \{\
		\cf4 // var initVal = ~atqs[smallest];\cf2 \
		\cf3 var\cf2  a, b;\
		\cf3 var\cf2  odd = \cf3 true\cf2 ;\
		suppressContinuousPitch[1]=\cf3 true\cf2 ;\
		a = \cf3 Pgeom\cf2 .new(0.05,1.1,24);\
		b = a.asStream;\
		\cf3 AppClock\cf2 .sched(0.0,\{ \
			if (odd==\cf3 true\cf2 , \
				\{mySynth[1].set(\cf6 \\freq\cf2 , bigNoteList[infreq[1] + currentNoteIndex[1]].midicps); odd = \cf3 false\cf2 \},\
				\{mySynth[1].set(\cf6 \\freq\cf2 , bigNoteList[infreq[1] + currentNoteIndex[1] + 1].midicps); odd = \cf3 true\cf2 \}\
			); \cf4 // end if	\cf2 \
			b.next; \
		\}); \cf4 // end app clock				\cf2 \
	\}, \cf4 // end if msg[1] = 1\cf2 \
	\{		suppressContinuousPitch[1]=\cf3 false\cf2 ;\
	\}\
); \cf4 // end if\cf2 \
\}, 2); \cf4 // end leawii\cf2 \
\
\cf4 // **************************\cf2 \
\cf4 // roll now sets filter value\cf2 \
atqsWii.add(\cf5 "nr"\cf2 , \{\cf3 |t,r,msg|\cf2 \
	\{mySynth[1].set(\cf6 \\cutoff\cf2 , \cf3 ControlSpec\cf2 .new(500,2000,\cf6 \\lin\cf2 ,1,200).map(msg[1]))\}.defer;\
\}, 2); \cf4 // end leaWii\cf2 \
\
\cf4 // ******************************************\cf2 \
\cf4 // end of wiimote stuff for pitch controllers\cf2 \
\cf4 // ******************************************\cf2 \
}